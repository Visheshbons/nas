<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home | VNAS</title>
    <link rel="stylesheet" href="styles.css">
    <script src="js/theme.js" defer></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
</head>
<body>
    <%- include('header') %>

    <main class="container">
        <!-- Breadcrumb Navigation -->
        <nav class="breadcrumb" aria-label="breadcrumb">
            <ol>
                <% const paths = currentPath.split('/').filter(p => p); %>
                <li><a href="/"><i class="fas fa-home"></i></a></li>
                <% let buildPath = ''; %>
                <% paths.forEach((path, index) => { %>
                    <% buildPath += '/' + path; %>
                    <li <%= index === paths.length - 1 ? 'class="active"' : '' %>>
                        <% if (index === paths.length - 1) { %>
                            <%= path %>
                        <% } else { %>
                            <a href="<%= buildPath %>"><%= path %></a>
                        <% } %>
                    </li>
                <% }); %>
            </ol>
        </nav>

        <!-- Action Buttons -->
        <div class="actions">
            <button class="btn primary" onclick="document.getElementById('upload-input').click()">
                <i class="fas fa-upload"></i> Upload
            </button>
            <input type="file" id="upload-input" multiple style="display: none">

            <button class="btn" onclick="document.getElementById('create-folder-modal').showModal()">
                <i class="fas fa-folder-plus"></i> New Folder
            </button>

            <button class="btn" id="view-toggle">
                <i class="fas fa-th-list"></i> View
            </button>
        </div>

        <!-- File Browser -->
        <div class="file-browser" id="file-browser">
            <% if (items && items.length > 0) { %>
                <% items.forEach(item => { %>
                    <div class="file-item" data-type="<%= item.type %>" data-path="<%= item.path %>" draggable="true">
                        <div class="file-icon" onclick="handleItemClick('<%= item.path %>', '<%= item.type %>')">
                            <% if (item.type === 'directory') { %>
                                <i class="fas fa-folder"></i>
                            <% } else { %>
                                <i class="fas fa-file"></i>
                            <% } %>
                        </div>

                        <div class="file-info" onclick="handleItemClick('<%= item.path %>', '<%= item.type %>')">
                            <span class="file-name"><%= item.name %></span>
                            <span class="file-meta">
                                <% if (item.type !== 'directory') { %>
                                    <%= item.size %>
                                <% } %>
                                <%= item.modified %>
                            </span>
                        </div>

                        <div class="file-actions">
                            <% if (item.type !== 'directory') { %>
                                <button class="btn-icon" onclick="previewFile('<%= item.path %>', '<%= item.type %>')" title="Preview">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn-icon" onclick="downloadFile('<%= item.path %>')" title="Download">
                                    <i class="fas fa-download"></i>
                                </button>
                            <% } %>
                            <button class="btn-icon" onclick="renameItem('<%= item.path %>')" title="Rename">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn-icon danger" onclick="deleteItem('<%= item.path %>')" title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="empty-state" id="dropzone">
                    <i class="fas fa-folder-open"></i>
                    <p>Drop files here or click the upload button</p>
                    <p class="empty-state-sub">This folder is empty</p>
                </div>
            <% } %>
        </div>
    </main>

    <!-- Context Menu -->
    <div class="context-menu" id="context-menu">
        <ul>
            <li><i class="fas fa-download"></i> Download</li>
            <li><i class="fas fa-edit"></i> Rename</li>
            <li><i class="fas fa-copy"></i> Copy</li>
            <li><i class="fas fa-cut"></i> Cut</li>
            <li><i class="fas fa-paste"></i> Paste</li>
            <li class="danger"><i class="fas fa-trash"></i> Delete</li>
        </ul>
    </div>

    <!-- Modal Templates -->
    <dialog id="create-folder-modal" class="modal">
        <form method="dialog" onsubmit="createNewFolder(event)">
            <h3>Create New Folder</h3>
            <input type="text" id="new-folder-name" placeholder="Folder name" required>
            <div class="modal-actions">
                <button class="btn" type="button" onclick="this.closest('dialog').close()">Cancel</button>
                <button class="btn primary" type="submit">Create</button>
            </div>
        </form>
    </dialog>

    <dialog id="rename-modal" class="modal">
        <form method="dialog">
            <h3>Rename Item</h3>
            <input type="text" id="rename-input" placeholder="New name" required>
            <div class="modal-actions">
                <button class="btn" type="button" onclick="this.closest('dialog').close()">Cancel</button>
                <button class="btn primary" type="submit">Rename</button>
            </div>
        </form>
    </dialog>

    <!-- Preview Modal -->
    <dialog id="preview-modal" class="modal preview-modal">
        <div class="modal-header">
            <h3 id="preview-title">File Preview</h3>
            <button class="btn-icon" onclick="this.closest('dialog').close()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="preview-content" id="preview-content">
            <!-- Content will be loaded here -->
        </div>
    </dialog>

    <%- include('footer') %>

    <script>
        // File Preview Handler
        async function previewFile(path, type) {
            const modal = document.getElementById('preview-modal');
            const content = document.getElementById('preview-content');
            const title = document.getElementById('preview-title');

            try {
                const response = await fetch(`/preview?path=${encodeURIComponent(path)}`);
                const contentType = response.headers.get('Content-Type');

                if (contentType.startsWith('image/')) {
                    // Image preview
                    const blob = await response.blob();
                    const url = URL.createObjectURL(blob);
                    content.innerHTML = `<img src="${url}" alt="Preview">`;
                } else if (contentType.startsWith('text/') || contentType.includes('javascript')) {
                    // Text preview
                    const text = await response.text();
                    content.innerHTML = `<pre><code>${escapeHtml(text)}</code></pre>`;
                } else if (contentType.startsWith('video/')) {
                    // Video preview
                    content.innerHTML = `
                        <video controls>
                            <source src="/preview?path=${encodeURIComponent(path)}" type="${contentType}">
                            Your browser does not support the video tag.
                        </video>`;
                } else if (contentType.startsWith('audio/')) {
                    // Audio preview
                    content.innerHTML = `
                        <audio controls>
                            <source src="/preview?path=${encodeURIComponent(path)}" type="${contentType}">
                            Your browser does not support the audio tag.
                        </audio>`;
                } else {
                    content.innerHTML = '<div class="no-preview">Preview not available for this file type</div>';
                }

                title.textContent = path.split('/').pop();
                modal.showModal();
            } catch (error) {
                console.error('Preview error:', error);
                alert('Error loading preview');
            }
        }

        // HTML Escape Helper
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>

    <script>
        // File Upload Handler
        document.getElementById('upload-input').addEventListener('change', async (e) => {
            const files = e.target.files;
            const formData = new FormData();

            for (let file of files) {
                formData.append('files', file);
            }

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });
                if (response.ok) {
                    window.location.reload();
                }
            } catch (err) {
                console.error('Upload failed:', err);
            }
        });

        // Folder Creation
        async function createNewFolder(event) {
            event.preventDefault();
            const folderName = document.getElementById('new-folder-name').value;
            const currentPath = '<%= currentPath %>';

            try {
                const response = await fetch('/create-folder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: folderName,
                        path: currentPath
                    })
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    alert('Failed to create folder');
                }
            } catch (error) {
                console.error('Error creating folder:', error);
                alert('Error creating folder');
            }

            document.getElementById('create-folder-modal').close();
        }

        // Drag and Drop Functionality
        // Handle item clicks (folder navigation and file downloads)
        function handleItemClick(itemPath, itemType) {
            if (itemType === 'directory') {
                window.location.href = `/?path=${encodeURIComponent(itemPath)}`;
            } else {
                downloadFile(itemPath);
            }
        }

        // Drag and drop functionality
        document.querySelectorAll('.file-item').forEach(item => {
            item.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('text/plain', item.dataset.path);
                item.classList.add('dragging');
            });

            if (item.dataset.type === 'directory') {
                item.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    item.classList.add('drag-over');
                });

                item.addEventListener('dragleave', (e) => {
                    item.classList.remove('drag-over');
                });

                item.addEventListener('drop', async (e) => {
                    e.preventDefault();
                    item.classList.remove('drag-over');
                    const sourcePath = e.dataTransfer.getData('text/plain');
                    const targetPath = item.dataset.path;

                    try {
                        const response = await fetch('/move', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                source: sourcePath,
                                target: targetPath
                            })
                        });

                        if (response.ok) {
                            window.location.reload();
                        } else {
                            const error = await response.text();
                            alert(error || 'Failed to move item');
                        }
                    } catch (error) {
                        console.error('Error moving item:', error);
                        alert('Error moving item');
                    }
                });
            }

            item.addEventListener('dragend', () => {
                item.classList.remove('dragging');
                document.querySelectorAll('.file-item').forEach(item => {
                    item.classList.remove('drag-over');
                });
            });
        });

        // Context Menu
        document.addEventListener('contextmenu', (e) => {
            if (e.target.closest('.file-item')) {
                e.preventDefault();
                const menu = document.getElementById('context-menu');
                menu.style.left = `${e.pageX}px`;
                menu.style.top = `${e.pageY}px`;
                menu.classList.add('active');
            }
        });

        document.addEventListener('click', () => {
            document.getElementById('context-menu').classList.remove('active');
        });

        // View Toggle
        document.getElementById('view-toggle').addEventListener('click', () => {
            document.getElementById('file-browser').classList.toggle('grid-view');
        });

        // File Operations
        async function downloadFile(path) {
            window.location.href = `/download?path=${encodeURIComponent(path)}`;
        }

        function renameItem(path) {
            const modal = document.getElementById('rename-modal');
            const input = document.getElementById('rename-input');
            const currentName = path.split('/').pop();
            input.value = currentName;
            modal.showModal();
        }

        async function deleteItem(path) {
            if (confirm('Are you sure you want to delete this item?')) {
                try {
                    const response = await fetch('/delete', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ path })
                    });
                    if (response.ok) {
                        window.location.reload();
                    }
                } catch (err) {
                    console.error('Delete failed:', err);
                }
            }
        }
    </script>
</body>
</html>
